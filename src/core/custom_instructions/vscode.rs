//! Custom install method for `Visual Studio Code`.
//! 
//! Because we are using the archive version instead of the official installer,
//! we need to extract it into the tools directory, set path variable with it,
//! and then create a desktop shortcut. The last part is a bit harder to do,
//! there's currently no suitable solution other than execute some commands to hack it.

use std::path::{Path, PathBuf};
use crate::core::directories::RimDir;
use crate::core::install::InstallConfiguration;
use crate::core::os::add_to_path;
use anyhow::Result;
use rim_common::utils;

#[derive(Debug)]
pub(crate) struct VSCodeInstaller<'a> {
    /// The command to invoke VSCode, defaulting to `code`.
    pub(crate) cmd: &'a str,
    pub(crate) tool_name: &'a str,
    /// The name of the desktop shortcut.
    pub(crate) shortcut_name: &'a str,
    /// The name of the main binary, which is located under the extracted folder,
    /// this is where the shortcut pointed to
    pub(crate) binary_name: &'a str,
}

impl VSCodeInstaller<'_> {
    pub(crate) fn install(&self, path: &Path, config: &InstallConfiguration) -> Result<Vec<PathBuf>> {
        // Step 1: Move the root of the directory into `tools` directory
        let vscode_dir = config.tools_dir().join(self.tool_name);
        utils::move_to(path, &vscode_dir, true)?;

        // Step 2: Add the `bin/` folder to path
        let bin_dir = vscode_dir.join("bin");
        add_to_path(config, &bin_dir)?;

        // Step 2.5: Make sure the executables have execute permission
        // (depending on the build, sometimes they don't...)
        let exec_script = bin_dir.join(self.cmd);
        utils::set_exec_permission(&exec_script)?;
        let actual_bin = vscode_dir.join(self.binary_name);
        utils::set_exec_permission(&actual_bin)?;

        // Step 3: Create a shortcuts
        // Shortcuts are not important, make sure it won't throw error even if it fails.
        let mut icon_path = vscode_dir.clone();
        icon_path.push("resources");
        icon_path.push("app");
        icon_path.push("out");
        icon_path.push("media");
        icon_path.push("code-icon.svg");

        let app_sc = utils::ApplicationShortcut {
            name: self.shortcut_name,
            path: actual_bin,
            icon: icon_path.exists().then_some(icon_path),
            comment: Some("Code Editing. Redefined."),
            generic_name: Some("Text Editor"),
            field_code: Some("%F"),
            startup_notify: false,
            startup_wm_class: Some(self.tool_name),
            categories: &["TextEditor", "Development", "IDE"],
            mime_type: &["application/x-code-workspace"],
            keywords: &[self.tool_name],
        };
        if let Err(e) = app_sc.create() {
            warn!("skip creating shortcuts for '{}', reason: {e}", self.tool_name);
        }

        Ok(vec![vscode_dir])
    }

    pub(crate) fn uninstall<T: RimDir + Copy>(&self, config: T) -> Result<()> {
        use crate::core::os::remove_from_path;

        // We've added a path for VSCode at `<InstallDir>/tools/vscode/bin`, try removing it from `PATH`.
        let mut vscode_path = config.tools_dir().to_path_buf();
        vscode_path.push(self.tool_name);
        vscode_path.push("bin");
        remove_from_path(config, &vscode_path)?;

        // TODO: Remove desktop shortcut and `%USERPROFILE%/.vscode`.
        // We need to see if the shortcut has the correct target before removing it,
        // and we also need to ask user if they want to remove the user profile
        // before doing so, since that folder might be shared with other vscode variants.
        #[cfg(unix)]
        {
            let Some(filepath)  = dirs::data_local_dir()
                .map(|d| d.join(format!("applications/{}.desktop", self.cmd)))
                .filter(|f| f.is_file())
            else {
                return Ok(());
            };
            if let Ok(content) = utils::read_to_string("program shortcut", &filepath) {
                if content.contains(&format!("# Generated by {}", env!("CARGO_PKG_NAME"))) && utils::remove(&filepath).is_err() {
                    warn!("{}", t!("remove_vscode_shortcut_warn", path = filepath.display()));
                    return Ok(());
                }
            }
        }

        Ok(())
    }

    pub(crate) fn is_installed(&self) -> bool {
        utils::cmd_exist(self.cmd)
    }
}

const VSCODE: VSCodeInstaller = VSCodeInstaller {
    cmd: "code",
    tool_name: "vscode",
    shortcut_name: "Visual Studio Code",
    #[cfg(windows)]
    binary_name: "Code",
    #[cfg(not(windows))]
    binary_name: "code",
};

pub(super) fn install(path: &Path, config: &InstallConfiguration) -> Result<Vec<PathBuf>> {
    VSCODE.install(path, config)
}

pub(super) fn uninstall<T: RimDir + Copy>(config: T) -> Result<()> {
    VSCODE.uninstall(config)
}

pub(super) fn is_installed() -> bool {
    VSCODE.is_installed()
}
